/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/ZcQI7r9ueWq
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'
import { Cormorant_Garamond } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

cormorant_garamond({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import TimeComponent from "./TimeComponent";

export function WeatherTimeZone() {
  const timeZones = [
    { name: "New York", offset: -5 },
    { name: "London", offset: 0 },
    { name: "Paris", offset: 1 },
    { name: "Moscow", offset: 3 },
    { name: "Dubai", offset: 4 },
    { name: "Tokyo", offset: 9 },
    { name: "Sydney", offset: 10 },
    { name: "Auckland", offset: 12 },
    { name: "Rio de Janeiro", offset: -3 },
    { name: "Cape Town", offset: 2 },
    { name: "Mumbai", offset: 5.5 },
    { name: "Singapore", offset: 8 },
  ]
  const getCurrentTime = (offset) => {
    const now = new Date()
    const localTime = now.getTime() + now.getTimezoneOffset() * 60000
    const utcTime = localTime + 3600000 * offset
    return new Date(utcTime);
  }
  const getTimeOfDay = (hour) => {
    if (hour >= 6 && hour < 12) {
      return "morning"
    } else if (hour >= 12 && hour < 18) {
      return "afternoon"
    } else {
      return "night"
    }
  }
  const getWeatherIcon = (condition) => {
    switch (condition) {
      case "clear":
        return "☀️"
      case "cloudy":
        return "☁️"
      case "rainy":
        return "🌧️"
      case "snowy":
        return "❄️"
      case "stormy":
        return "⛈️"
      default:
        return "🌤️"
    }
  }
  const getMoonPhase = (date) => {
    const phases = ["🌑", "🌒", "🌓", "🌔", "🌕", "🌖", "🌗", "🌘"]
    const phase = Math.floor((date.getDate() - 1) / 7)
    return phases[phase]
  }
  return (
    (<div
      className="w-full min-h-screen bg-gradient-to-b from-[#0077b6] to-[#00a8e8] text-white">
      <header className="bg-[#005a8e] py-4 px-6 shadow-md">
        <h1 className="text-2xl font-bold">Weather Clock Portal</h1>
      </header>
      <main
        className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 p-6">
          <TimeComponent IANA="America/Costa_Rica" city="Costa Rica" bg="#FFA500"/> 
          <TimeComponent IANA="America/Lima" city="Perú" bg="#2980B9"/> 
        <TimeComponent IANA="America/Bogota" city="Colombia" bg="#27AE60"/> 
        <TimeComponent IANA="America/Chicago" city="Texas, U.S.A" bg="#D35400"/> 
        <TimeComponent IANA="America/New_York" city="Florida, U.S.A" bg="#7F8C8D"/> 
        <TimeComponent IANA="America/New_York" city="Pensilvania, U.S.A" bg="#C0392B"/> 
        <TimeComponent IANA="America/La_Paz" city="Bolivia" bg="#FF6B6B"/> 
        <TimeComponent IANA="America/Santo_Domingo" city="Republica Dominicana" bg="#9B59B6"/>  
        <TimeComponent IANA="America/Montevideo" city="Uruguay" bg="#E74C3C"/>  
        <TimeComponent IANA="America/Argentina/Buenos_Aires" city="Argentina" bg="#8E44AD"/> 
        <TimeComponent IANA="Europe/Madrid" city="España" bg="#F1C40F"/>  
        <TimeComponent IANA="Asia/Kolkata" city="India" bg="#16A085"/> 
      </main>
    </div>)
  );
}
